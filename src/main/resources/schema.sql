-- Создание таблицы MPA (возрастные рейтинги)
CREATE TABLE IF NOT EXISTS mpa (
                                   id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                   name VARCHAR(50) NOT NULL UNIQUE
    );

-- Создание таблицы жанров
CREATE TABLE IF NOT EXISTS genres (
                                      id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                      name VARCHAR(50) NOT NULL UNIQUE
    );

-- Создание таблицы пользователей
CREATE TABLE IF NOT EXISTS users (
                                     id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                     email VARCHAR(100) NOT NULL UNIQUE,
    login VARCHAR(50) NOT NULL,
    name VARCHAR(100) NOT NULL,
    birthday DATE
    );

-- Создание таблицы фильмов
CREATE TABLE IF NOT EXISTS films (
                                     id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                     name VARCHAR(100) NOT NULL,
    description VARCHAR(200),
    release_date DATE,
    duration INTEGER,
    mpa_id INTEGER NOT NULL,
    FOREIGN KEY (mpa_id) REFERENCES mpa(id)
    );

-- Создание таблицы связи фильмов и жанров (многие-ко-многим)
CREATE TABLE IF NOT EXISTS film_genres (
                                           film_id INTEGER NOT NULL,
                                           genre_id INTEGER NOT NULL,
                                           PRIMARY KEY (film_id, genre_id),
    FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES genres(id) ON DELETE CASCADE
    );

-- Создание таблицы дружбы
CREATE TABLE IF NOT EXISTS friends (
                                       id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                       user_id INTEGER NOT NULL,
                                       friend_id INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (friend_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT unique_friendship UNIQUE (user_id, friend_id)
    );

-- Создание таблицы лайков
CREATE TABLE IF NOT EXISTS likes (
                                     id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                     film_id INTEGER NOT NULL,
                                     user_id INTEGER NOT NULL,
                                     created_date TIMESTAMP NOT NULL,
                                     FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT unique_like UNIQUE (film_id, user_id)
    );

-- Создание индексов для ускорения запросов
CREATE INDEX IF NOT EXISTS idx_like_film ON likes(film_id);
CREATE INDEX IF NOT EXISTS idx_like_user ON likes(user_id);